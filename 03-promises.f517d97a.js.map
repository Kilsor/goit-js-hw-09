{"mappings":"iiBACA,IAAAA,EAAAC,EAAA,SAGsC,SAA7BC,EAAcC,EAAUC,GAES,OAAjC,IAAIC,SAAQ,SAACC,EAASC,GAE2C,IAAhEC,EAAgBC,KAAKC,SAAW,GAEqBC,YAAhD,WAELH,EACFF,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAIiDQ,SAA/CC,cAAc,SAASC,iBAAiB,UAAU,SAAUC,GAE1BA,EAAnCC,iBAMmC,IAJd,IAAvBC,EAAQC,OAAOH,EAAMI,OAAOC,SAAShB,MAAMiB,OACzCC,EAAOJ,OAAOH,EAAMI,OAAOC,SAASE,KAAKD,OACzCE,EAASL,OAAOH,EAAMI,OAAOC,SAASG,OAAOF,OAE1CG,EAAI,EAAGA,GAAKD,EAAQC,IAC3BtB,EAAcsB,EAAGP,GAESQ,MAAlB,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MAEjBuB,EAAA3B,GAAS4B,OAAOC,QACd,uBAAwCC,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,M,IAIzB2B,OAAlB,SAAAL,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MAElBuB,EAAA3B,GAAS4B,OAAOI,QACd,sBAAuCF,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,M,IAInDa,GAASK,C","sources":["src/js/03-promises.js"],"sourcesContent":["// Підключення бібліотеки Notiflix\nimport Notiflix from 'notiflix';\n\n// Створення функції createPromise, яка повертає новий проміс\nfunction createPromise(position, delay) {\n  // Створення нового проміса з функцією виконання (executor function)\n  return new Promise((resolve, reject) => {\n    // Генерація випадкового значення для визначення виконання або відхилення промісу\n    const shouldResolve = Math.random() > 0.3;\n    // Встановлення таймеру для затримки виконання або відхилення промісу\n    setTimeout(() => {\n      // Виклик функції resolve, якщо проміс повинен виконатись\n      if (shouldResolve) {\n        resolve({ position, delay });\n        // Виклик функції reject, якщо проміс повинен відхилитись\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n// Прикріплення обробників подій до форми, які відслідковують подію 'submit'\ndocument.querySelector('.form').addEventListener('submit', function (event) {\n  // Відміна стандартної дії браузера по події 'submit' форми\n  event.preventDefault();\n  // Отримання значень з полів форми\n  let delay = Number(event.target.elements.delay.value);\n  const step = Number(event.target.elements.step.value);\n  const amount = Number(event.target.elements.amount.value);\n  // Цикл для створення вказаної кількості промісів\n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, delay)\n      // Обробка виконання промісу\n      .then(({ position, delay }) => {\n        // Виклик функції Notiflix.Notify.success для відображення спливаючого повідомлення успішного виконання\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      // Обробка відхилення промісу\n      .catch(({ position, delay }) => {\n        // Виклик функції Notiflix.Notify.failure для відображення спливаючого повідомлення відхилення\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    // Збільшення затримки для наступного промісу на вказаний крок\n    delay += step;\n  }\n});\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","delay1","Number","target","elements","value","step","amount","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.f517d97a.js.map"}