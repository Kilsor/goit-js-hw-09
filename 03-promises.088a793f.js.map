{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SAGsC,SAA7BC,EAAcC,EAAUC,GAES,OAAjC,IAAIC,SAAQ,CAACC,EAASC,KAE2C,MAAhEC,EAAgBC,KAAKC,SAAW,GAEqBC,YAAhD,KAELH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAGpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAI2CQ,SAA/CC,cAAc,SAASC,iBAAiB,UAAU,SAAUC,GAE1BA,EAAnCC,iBAEqB,IAAvBC,EAAQC,OAAOH,EAAMI,OAAOC,SAAShB,MAAMiB,OAC/C,MAAMC,EAAOJ,OAAOH,EAAMI,OAAOC,SAASE,KAAKD,OACzCE,EAASL,OAAOH,EAAMI,OAAOC,SAASG,OAAOF,OAEV,IAApC,IAAIG,EAAI,EAAGA,GAAKD,EAAQC,IAC3BtB,EAAcsB,EAAGP,GAESQ,MAAlB,EAACtB,SAAEA,EAAQC,MAAEA,MAEjBsB,EAAA1B,GAAS2B,OAAOC,QACd,uBAAqBzB,QAAiBC,MAAU,IAI3ByB,OAAlB,EAAC1B,SAAEA,EAAQC,MAAEA,MAElBsB,EAAA1B,GAAS2B,OAAOG,QACd,sBAAoB3B,QAAiBC,MAAU,IAIrDa,GAASK,C","sources":["src/js/03-promises.js"],"sourcesContent":["// Підключення бібліотеки Notiflix\nimport Notiflix from 'notiflix';\n\n// Створення функції createPromise, яка повертає новий проміс\nfunction createPromise(position, delay) {\n  // Створення нового проміса з функцією виконання (executor function)\n  return new Promise((resolve, reject) => {\n    // Генерація випадкового значення для визначення виконання або відхилення промісу\n    const shouldResolve = Math.random() > 0.3;\n    // Встановлення таймеру для затримки виконання або відхилення промісу\n    setTimeout(() => {\n      // Виклик функції resolve, якщо проміс повинен виконатись\n      if (shouldResolve) {\n        resolve({ position, delay });\n        // Виклик функції reject, якщо проміс повинен відхилитись\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n// Прикріплення обробників подій до форми, які відслідковують подію 'submit'\ndocument.querySelector('.form').addEventListener('submit', function (event) {\n  // Відміна стандартної дії браузера по події 'submit' форми\n  event.preventDefault();\n  // Отримання значень з полів форми\n  let delay = Number(event.target.elements.delay.value);\n  const step = Number(event.target.elements.step.value);\n  const amount = Number(event.target.elements.amount.value);\n  // Цикл для створення вказаної кількості промісів\n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, delay)\n      // Обробка виконання промісу\n      .then(({ position, delay }) => {\n        // Виклик функції Notiflix.Notify.success для відображення спливаючого повідомлення успішного виконання\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      // Обробка відхилення промісу\n      .catch(({ position, delay }) => {\n        // Виклик функції Notiflix.Notify.failure для відображення спливаючого повідомлення відхилення\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    // Збільшення затримки для наступного промісу на вказаний крок\n    delay += step;\n  }\n});\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","delay1","Number","target","elements","value","step","amount","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.088a793f.js.map"}